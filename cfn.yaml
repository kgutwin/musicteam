# NOTE: This template is intended to be merged with the auto-generated
# template from Chalice.

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
  PrivateSubnets:
    Type: List<AWS::EC2::Subnet::Id>
  FQDN:
    Type: String
  HostedZoneId:
    Type: AWS::Route53::HostedZone::Id
  OAuthClientId:
    Type: String
  OAuthClientSecret:
    Type: String
    NoEcho: true

Resources:
  # Aurora PostgreSQL Database
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "access group for musicteam backend DB"
      VpcId: !Ref VpcId
  BackendDatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "subnets for musicteam backend"
      SubnetIds: !Ref PrivateSubnets
  BackendDatabaseCluster:
    Type: AWS::RDS::DBCluster
    DeletionPolicy: Snapshot
    Properties:
      Engine: aurora-postgresql
      EngineVersion: "17.5"
      ServerlessV2ScalingConfiguration:
        MinCapacity: 0
        MaxCapacity: 2
        SecondsUntilAutoPause: 300
      DBSubnetGroupName: !Ref BackendDatabaseSubnetGroup
      VpcSecurityGroupIds:
        - !Ref DBSecurityGroup
      DatabaseName: musicteam
      EnableHttpEndpoint: true
      MasterUsername: musicteam
      ManageMasterUserPassword: true
  BackendDatabaseDefaultInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: aurora-postgresql
      DBInstanceClass: db.serverless
      DBClusterIdentifier: !Ref BackendDatabaseCluster
      MonitoringInterval: 0

  # Object bucket
  ObjectBucket:
    Type: AWS::S3::Bucket

  # Frontend CloudFront and S3
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-frontend

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: GrantCloudFrontAccess
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action:
              - s3:ListBucket
              - s3:GetObject
            Resource:
              - !Sub "arn:aws:s3:::${FrontendBucket}"
              - !Sub "arn:aws:s3:::${FrontendBucket}/*"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${FrontendDistribution}"

  FrontendOAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${AWS::StackName}-oac-config"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  FrontendDNS:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref FQDN
      Type: A
      HostedZoneId: !Ref HostedZoneId
      AliasTarget:
        DNSName: !GetAtt FrontendDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2

  FrontendCert:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref FQDN
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref FQDN
          HostedZoneId: !Ref HostedZoneId

  FrontendDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3
            DomainName: !GetAtt FrontendBucket.DomainName
            OriginAccessControlId: !GetAtt FrontendOAC.Id
            S3OriginConfig:
              OriginAccessIdentity: ""
          - Id: API
            DomainName: !Sub "${RestAPI}.execute-api.${AWS::Region}.${AWS::URLSuffix}"
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
            OriginCustomHeaders:
              - HeaderName: X-Original-Host
                HeaderValue: !Ref FQDN
        Enabled: "true"
        DefaultRootObject: index.html
        Aliases:
          - !Ref FQDN
        DefaultCacheBehavior:
          TargetOriginId: S3
          # CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled
          ViewerProtocolPolicy: redirect-to-https
        CacheBehaviors:
          - AllowedMethods: ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"]
            TargetOriginId: API
            PathPattern: api/*
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled
            OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac # AllViewerExceptHostHeader
            ViewerProtocolPolicy: https-only
        CustomErrorResponses:
          - ErrorCode: "404"
            ResponsePagePath: "/404.html"
            ResponseCode: 404
        ViewerCertificate:
          SslSupportMethod: sni-only
          AcmCertificateArn: !Ref FrontendCert

  # Secrets
  SiteSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: site secret for encoding sessions
      GenerateSecretString:
        ExcludePunctuation: true

  ClientSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Google OAuth client secret
      SecretString: !Ref OAuthClientSecret

  # inject environment variables
  APIHandler:
    Properties:
      Environment:
        Variables:
          AURORA_CLUSTER_ARN: !GetAtt BackendDatabaseCluster.DBClusterArn
          AURORA_SECRET_ARN: !GetAtt BackendDatabaseCluster.MasterUserSecret.SecretArn
          OBJECT_BUCKET_NAME: !Ref ObjectBucket
          SITE_SECRET: !Ref SiteSecret
          OAUTH_CLIENT_ID: !Ref OAuthClientId
          OAUTH_CLIENT_SECRET: !Ref ClientSecret

  DefaultRole:
    Properties:
      Policies:
        - PolicyName: DefaultRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:*:logs:*:*:*

        - PolicyName: DbAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: CredentialsAccess
                Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !GetAtt BackendDatabaseCluster.MasterUserSecret.SecretArn
                  - !Ref SiteSecret
                  - !Ref ClientSecret
              - Sid: DataServiceAccess
                Effect: Allow
                Action:
                  - rds-data:BatchExecuteStatement
                  - rds-data:BeginTransaction
                  - rds-data:CommitTransaction
                  - rds-data:ExecuteStatement
                  - rds-data:RollbackTransaction
                Resource: !GetAtt BackendDatabaseCluster.DBClusterArn

        - PolicyName: S3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: S3Access
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                  - s3:GetBucketLocation
                  - s3:ListMultipartUploadParts
                  - s3:AbortMultipartUpload
                Resource:
                  - !GetAtt ObjectBucket.Arn
                  - !Sub "${ObjectBucket.Arn}/*"
