from collections import namedtuple
from types import TracebackType
from typing import Self, Mapping, Any, Iterable, Iterator

ColumnDescription = namedtuple(
    "ColumnDescription",
    "name type_code display_size internal_size precision scale null_ok",
)

class AuroraDataAPICursor:
    description: ColumnDescription

    @property
    def rowcount(self) -> int: ...
    def execute(
        self, operation: str, parameters: Mapping[str, Any] | None = None
    ) -> None: ...
    def executemany(
        self, operation: str, seq_of_parameters: Iterable[Mapping[str, Any]]
    ) -> None: ...
    def __iter__(self) -> Iterator[tuple[Any, ...]]: ...
    def fetchone(self) -> tuple[Any, ...] | None: ...
    def fetchall(self) -> list[tuple[Any, ...]]: ...

class AuroraDataAPIClient:
    def __enter__(self) -> Self: ...
    def __exit__(
        self,
        err_type: type[BaseException] | None,
        value: BaseException | None,
        traceback: TracebackType | None,
    ) -> None: ...
    def commit(self) -> None: ...
    def rollback(self) -> None: ...
    def cursor(self) -> AuroraDataAPICursor: ...

def connect(*, database: str | None = None) -> AuroraDataAPIClient: ...
